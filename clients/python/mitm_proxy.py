import json
import base64
import http.server
import socketserver
import requests
from cryptography.hazmat.primitives.asymmetric import rsa, ec
from cryptography.hazmat.primitives import serialization

# –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∫—Å–∏ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
PROXY_PORT = 8081
# –ê–¥—Ä–µ—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_URL = "http://localhost:8080"

# –°—á—ë—Ç—á–∏–∫ —ç—Ç–∞–ø–æ–≤ –ø–æ–¥–º–µ–Ω—ã (0 - –Ω–µ—Ç –ø–æ–¥–º–µ–Ω, 1 - rsa_pub_client, 2 - ecdsa_pub_client, 3 - nonce1, 4 - signature1)
step = 0

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–ª—å—à–∏–≤–æ–≥–æ RSA-–∫–ª—é—á–∞
def generate_fake_rsa_key():
    rsa_private_key = rsa.generate_private_key(public_exponent=65537, key_size=3072)
    rsa_public_key = rsa_private_key.public_key()
    der = rsa_public_key.public_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    return base64.b64encode(der).decode('utf-8')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–ª—å—à–∏–≤–æ–≥–æ ECDSA-–∫–ª—é—á–∞
def generate_fake_ecdsa_key():
    ecdsa_private_key = ec.generate_private_key(curve=ec.SECP256R1())
    ecdsa_public_key = ecdsa_private_key.public_key()
    der = ecdsa_public_key.public_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    return base64.b64encode(der).decode('utf-8')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–ª—å—à–∏–≤–æ–≥–æ nonce
def generate_fake_nonce():
    return base64.b64encode(b"fake_nonce").decode('utf-8')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–ª—å—à–∏–≤–æ–π –ø–æ–¥–ø–∏—Å–∏
def generate_fake_signature():
    return base64.b64encode(b"fake_signature").decode('utf-8')

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
class MitMProxy(http.server.SimpleHTTPRequestHandler):
    global step

    def do_POST(self):
        global step
        # –ß–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        content_length = int(self.headers.get('Content-Length', 0))
        request_data = self.rfile.read(content_length).decode('utf-8')
        request_json = json.loads(request_data)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if self.path == "/handshake/init":
            print(f"üåê –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ /handshake/init (—ç—Ç–∞–ø {step})")

            # –ü–æ—ç—Ç–∞–ø–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞
            if step == 1:
                print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—ã rsa_pub_client")
                original_rsa_pub = request_json['rsa_pub_client']
                fake_rsa_pub = generate_fake_rsa_key()
                print(f"üîÑ –ü–æ–¥–º–µ–Ω–∞ rsa_pub_client: {original_rsa_pub[:20]}... -> {fake_rsa_pub[:20]}...")
                request_json['rsa_pub_client'] = fake_rsa_pub
            elif step == 2:
                print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—ã ecdsa_pub_client")
                original_ecdsa_pub = request_json['ecdsa_pub_client']
                fake_ecdsa_pub = generate_fake_ecdsa_key()
                print(f"üîÑ –ü–æ–¥–º–µ–Ω–∞ ecdsa_pub_client: {original_ecdsa_pub[:20]}... -> {fake_ecdsa_pub[:20]}...")
                request_json['ecdsa_pub_client'] = fake_ecdsa_pub
            elif step == 3:
                print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—ã nonce1")
                original_nonce1 = request_json['nonce1']
                fake_nonce1 = generate_fake_nonce()
                print(f"üîÑ –ü–æ–¥–º–µ–Ω–∞ nonce1: {original_nonce1[:20]}... -> {fake_nonce1[:20]}...")
                request_json['nonce1'] = fake_nonce1
            elif step == 4:
                print("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–º–µ–Ω—ã signature1")
                original_signature1 = request_json['signature1']
                fake_signature1 = generate_fake_signature()
                print(f"üîÑ –ü–æ–¥–º–µ–Ω–∞ signature1: {original_signature1[:20]}... -> {fake_signature1[:20]}...")
                request_json['signature1'] = fake_signature1

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä—É
            try:
                # –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å–µ—Ä–≤–µ—Ä—É
                response = requests.post(f"{SERVER_URL}/handshake/init", json=request_json, headers=self.headers)
                if not response.ok:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} {response.reason}"
                    print(f"{error_msg}\n–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                    self.send_error(response.status_code, explain=error_msg)
                    step += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if step > 4:
                        step = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
                    return
            except requests.RequestException as e:
                error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}"
                print(f"{error_msg}\n–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {request_data}")
                self.send_error(502, explain=error_msg)
                step += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if step > 4:
                    step = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            response_json = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ /handshake/init")
            step += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if step > 4:
                step = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤

        elif self.path == "/handshake/finalize":
            print("üåê –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ /handshake/finalize")
            # –ü–æ–¥–º–µ–Ω–∞ encrypted
            original_encrypted = request_json['encrypted']
            fake_encrypted = base64.b64encode(b"fake_data").decode('utf-8')
            print(f"üîÑ –ü–æ–¥–º–µ–Ω–∞ encrypted: {original_encrypted[:20]}... -> {fake_encrypted[:20]}...")
            request_json['encrypted'] = fake_encrypted

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä—É
            headers = {"X-Client-ID": self.headers.get("X-Client-ID", "")}
            try:
                response = requests.post(f"{SERVER_URL}/handshake/finalize", json=request_json, headers=headers, timeout=5)
                if not response.ok:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} {response.reason}"
                    print(f"{error_msg}\n–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                    self.send_error(response.status_code, explain=error_msg)
                    return
            except requests.RequestException as e:
                error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}"
                print(f"{error_msg}\n–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {request_data}")
                self.send_error(502, explain=error_msg)
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            response_json = response.json()
            print("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ /handshake/finalize –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")

        else:
            self.send_response(404)
            self.end_headers()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        self.send_response(response.status_code)
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps(response_json).encode('utf-8'))

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
def run_proxy():
    server_address = ('', PROXY_PORT)
    httpd = socketserver.TCPServer(server_address, MitMProxy)
    print(f"üåê –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PROXY_PORT}...")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("‚èπ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        httpd.shutdown()

if __name__ == "__main__":
    run_proxy()