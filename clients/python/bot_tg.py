import sqlite3
import logging
import base64
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters
import requests
from client_http import perform_handshake, perform_finalize, derive_keys
from cryptography.hazmat.primitives import serialization

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7745265874:AAFKjBo36eDqq08hN30QTqK0v27HDnMlDL0"

# URL API —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
AUTH_BASE_URL = "http://localhost:8081"  # –î–ª—è Auth API (signup, login, logout)
SECURECOMM_BASE_URL = "http://localhost:8080"  # –î–ª—è SecureComm API (handshake, session)

SIGNUP_URL = f"{AUTH_BASE_URL}/user/signup"
LOGIN_URL = f"{AUTH_BASE_URL}/user/login"
LOGOUT_URL = f"{AUTH_BASE_URL}/user/logout"
HANDSHAKE_INIT_URL = f"{SECURECOMM_BASE_URL}/handshake/init"
HANDSHAKE_FINALIZE_URL = f"{SECURECOMM_BASE_URL}/handshake/finalize"

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
MAIN_MENU_BUTTONS = [
    [KeyboardButton('üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'), KeyboardButton('üîë –í–æ–π—Ç–∏')],
    [KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å'), KeyboardButton('üö™ –í—ã–π—Ç–∏')],
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
EMAIL, PASSWORD = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect("sessions.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sessions (
            telegram_id INTEGER PRIMARY KEY,
            client_id TEXT,
            ks_client TEXT,              -- ks –≤ Base64 –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ handshake
            ecdsa_priv_client TEXT       -- ecdsa_priv –≤ Base64 –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ handshake
        )
    ''')
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ SQLite
def save_session(telegram_id, client_id, ks_client=None, ecdsa_priv_client=None):
    try:
        conn = sqlite3.connect("sessions.db")
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO sessions (telegram_id, client_id, ks_client, ecdsa_priv_client)
            VALUES (?, ?, ?, ?)
        ''', (telegram_id, client_id, ks_client, ecdsa_priv_client))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        raise
    finally:
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ SQLite
def get_session(telegram_id):
    try:
        conn = sqlite3.connect("sessions.db")
        cursor = conn.cursor()
        cursor.execute(
            "SELECT client_id, ks_client, ecdsa_priv_client FROM sessions WHERE telegram_id = ?",
            (telegram_id,))
        result = cursor.fetchone()
        if result:
            return {
                "client_id": result[0],
                "ks_client": result[1],
                "ecdsa_priv_client": result[2]
            }
        return None
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return None
    finally:
        conn.close()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üü¢ *–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:*\n" \
           "‚Ä¢ üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äì –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n" \
           "‚Ä¢ üîë –í–æ–π—Ç–∏ ‚Äì –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n" \
           "‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äì —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" \
           "‚Ä¢ üö™ –í—ã–π—Ç–∏ ‚Äì –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

async def register_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["email"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def register_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = context.user_data["email"]
    password = update.message.text
    if len(password) < 6:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return PASSWORD
    context.user_data["password"] = password
    payload = {"email": email, "password": password, "platform": "tg-bot"}

    try:
        response = requests.post(SIGNUP_URL, json=payload)
        response.raise_for_status()
        try:
            data = response.json()
        except ValueError:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç–∞: {response.text}")
            raise ValueError("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
        access_token = data.get("access_token")
        refresh_token = data.get("refresh_token")
        if not access_token or not refresh_token:
            raise ValueError("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª access_token –∏–ª–∏ refresh_token")
        context.user_data["access_token"] = access_token
        context.user_data["refresh_token"] = refresh_token

        # –í—ã–ø–æ–ª–Ω—è–µ–º handshake
        handshake_data = perform_handshake(HANDSHAKE_INIT_URL, access_token)
        ks = perform_finalize(HANDSHAKE_FINALIZE_URL, handshake_data, access_token)
        client_id = handshake_data["client_id"]
        ecdsa_priv = handshake_data["ecdsa_priv"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ Base64
        ks_client = base64.b64encode(ks).decode('utf-8')
        ecdsa_priv_bytes = ecdsa_priv.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )
        ecdsa_priv_client = base64.b64encode(ecdsa_priv_bytes).decode('utf-8')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        save_session(update.effective_user.id, client_id, ks_client, ecdsa_priv_client)

        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.")
    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END

async def register_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –í—Ö–æ–¥ —á–µ—Ä–µ–∑ API
async def login_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

async def login_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["email"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = context.user_data["email"]
    password = update.message.text
    context.user_data["password"] = password
    payload = {"email": email, "password": password, "platform": "tg-bot"}

    try:
        response = requests.post(LOGIN_URL, json=payload)
        response.raise_for_status()
        try:
            data = response.json()
        except ValueError:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç–∞: {response.text}")
            raise ValueError("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
        access_token = data.get("access_token")
        refresh_token = data.get("refresh_token")
        ks_client = data.get("ks_client")
        ecdsa_priv_client = data.get("ecdsa_priv_client")
        if not access_token or not refresh_token or not ks_client or not ecdsa_priv_client:
            raise ValueError("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
        context.user_data["access_token"] = access_token
        context.user_data["refresh_token"] = refresh_token

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        session = get_session(update.effective_user.id)
        if session:
            client_id = session["client_id"]
            ks_client_existing = session["ks_client"]
            ecdsa_priv_client_existing = session["ecdsa_priv_client"]
            if ks_client != ks_client_existing or ecdsa_priv_client != ecdsa_priv_client_existing:
                logger.warning("–î–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é.")
                save_session(update.effective_user.id, client_id, ks_client, ecdsa_priv_client)
            else:
                logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è telegram_id {update.effective_user.id} –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º handshake –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è client_id
            handshake_data = perform_handshake(HANDSHAKE_INIT_URL, access_token)
            client_id = handshake_data["client_id"]
            save_session(update.effective_user.id, client_id, ks_client, ecdsa_priv_client)

        ks = base64.b64decode(ks_client)
        ecdsa_priv_bytes = base64.b64decode(ecdsa_priv_client)
        ecdsa_priv = serialization.load_pem_private_key(ecdsa_priv_bytes, password=None)
        k_enc, k_mac = derive_keys(ks)

        await update.message.reply_text("–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.")
        return ConversationHandler.END

    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        if "incorrect password or email" in error_msg or "Invalid credentials" in error_msg or "User not found" in error_msg:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –≤–≤–æ–¥–∞ email.")
            return EMAIL
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –≤–≤–æ–¥–∞ email.")
        return EMAIL

async def login_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if not session:
        await update.message.reply_text("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
        return
    refresh_token = context.user_data.get("refresh_token")
    if not refresh_token:
        await update.message.reply_text("–û—à–∏–±–∫–∞: refresh_token –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        payload = {"platform": "tg-bot", "refresh_token": refresh_token}
        response = requests.post(LOGOUT_URL, json=payload)
        response.raise_for_status()
        context.user_data.clear()
        try:
            conn = sqlite3.connect("sessions.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM sessions WHERE telegram_id = ?", (update.effective_user.id,))
            conn.commit()
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id {update.effective_user.id} —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ª–æ–≥–∞—É—Ç–∞.")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞! –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã.")
        await start(update, context)
    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    if "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" in txt or "üìù" in txt:
        await register_start(update, context)
    elif "–≤—Ö–æ–¥" in txt or "–≤–æ–π—Ç–∏" in txt or "üîë" in txt:
        await login_start(update, context)
    elif "–ø–æ–º–æ—â—å" in txt or "‚ÑπÔ∏è" in txt:
        await help_command(update, context)
    elif "–≤—ã–π—Ç–∏" in txt or "üö™" in txt:
        await logout(update, context)
    else:
        await update.message.reply_text("–Ø –≤–∞—Å –ø–æ–Ω—è–ª! –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    register_handler = ConversationHandler(
        entry_points=[CommandHandler("register", register_start),
                      MessageHandler(filters.Regex('^(üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)$'), register_start)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_password)],
        },
        fallbacks=[CommandHandler("cancel", register_cancel)]
    )

    # ConversationHandler –¥–ª—è –≤—Ö–æ–¥–∞
    login_handler = ConversationHandler(
        entry_points=[CommandHandler("login", login_start), MessageHandler(filters.Regex('^(üîë –í–æ–π—Ç–∏)$'), login_start)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
        },
        fallbacks=[CommandHandler("cancel", login_cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("logout", logout))
    app.add_handler(register_handler)
    app.add_handler(login_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()