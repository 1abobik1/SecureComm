import base64
import jwt
import sqlite3
import logging
import os
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters
from telegram.error import TimedOut
import asyncio
from client_http import encrypt_file,perform_finalize,perform_handshake,derive_keys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7745265874:AAFKjBo36eDqq08hN30QTqK0v27HDnMlDL0"

# URL API —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
AUTH_BASE_URL = "http://localhost:8081"  # –î–ª—è Auth API (signup, login, logout)
SECURECOMM_BASE_URL = "http://localhost:8080"  # –î–ª—è SecureComm API (handshake, session)
CLOUD_BASE_URL = "http://localhost:8080"  # –î–ª—è Cloud API (MinIO)

SIGNUP_URL = f"{AUTH_BASE_URL}/user/signup"
LOGIN_URL = f"{AUTH_BASE_URL}/user/login"
LOGOUT_URL = f"{AUTH_BASE_URL}/user/logout"
HANDSHAKE_INIT_URL = f"{SECURECOMM_BASE_URL}/handshake/init"
HANDSHAKE_FINALIZE_URL = f"{SECURECOMM_BASE_URL}/handshake/finalize"
UPLOAD_FILES_URL = f"{CLOUD_BASE_URL}/files/one/encrypted"  # –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
GET_FILE_URL = f"{CLOUD_BASE_URL}/files/one"
DELETE_FILE_URL = f"{CLOUD_BASE_URL}/files/one"
GET_ALL_FILES_URL = f"{CLOUD_BASE_URL}/files/all"
DELETE_FILES_URL = f"{CLOUD_BASE_URL}/files/many"

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–¥–æ –≤—Ö–æ–¥–∞)
MAIN_MENU_BUTTONS = [
    [KeyboardButton('üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'), KeyboardButton('üîë –í–æ–π—Ç–∏')],
    [KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')],
]

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
FILE_MENU_BUTTONS = [
    [KeyboardButton('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'), KeyboardButton('üì• –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª')],
    [KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª'), KeyboardButton('üìÇ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã')],
    [KeyboardButton('üö™ –í—ã–π—Ç–∏')],
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
EMAIL, PASSWORD = range(2)
FILE_ID, FILE_TYPE, FILE_CATEGORY = range(3)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect("sessions.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sessions (
            telegram_id INTEGER PRIMARY KEY,
            client_id TEXT,
            k_enc TEXT,
            k_mac TEXT
        )
    ''')
    conn.commit()
    conn.close()
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ SQLite
def save_session(telegram_id, client_id, k_enc=None, k_mac=None):
    try:
        conn = sqlite3.connect("sessions.db")
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO sessions (telegram_id, client_id, k_enc, k_mac)
            VALUES (?, ?, ?, ?)
        ''', (telegram_id, client_id, k_enc, k_mac))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        raise
    finally:
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ SQLite
def get_session(telegram_id):
    try:
        conn = sqlite3.connect("sessions.db")
        cursor = conn.cursor()
        cursor.execute(
            "SELECT client_id, k_enc, k_mac FROM sessions WHERE telegram_id = ?",
            (telegram_id,))
        result = cursor.fetchone()
        if result:
            return {
                "client_id": result[0],
                "k_enc": result[1],
                "k_mac": result[2]
            }
        return None
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return None
    finally:
        conn.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")
    if isinstance(context.error, TimedOut):
        if update and update.message:
            try:
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
            except Exception as e:
                logger.error(f"Failed to send timeout error message: {str(e)}")
    else:
        if update and update.message:
            try:
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
                )
            except Exception as e:
                logger.error(f"Failed to send error message: {str(e)}")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if session and context.user_data.get("access_token"):
        text = "üü¢ *–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:*\n" \
               "‚Ä¢ üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª ‚Äì –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª\n" \
               "‚Ä¢ üì• –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ ID\n" \
               "‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ‚Äì —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ ID\n" \
               "‚Ä¢ üìÇ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n" \
               "‚Ä¢ üö™ –í—ã–π—Ç–∏ ‚Äì –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        reply_markup = ReplyKeyboardMarkup(FILE_MENU_BUTTONS, resize_keyboard=True)
    else:
        text = "üü¢ *–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:*\n" \
               "‚Ä¢ üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äì –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n" \
               "‚Ä¢ üîë –í–æ–π—Ç–∏ ‚Äì –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n" \
               "‚Ä¢ ‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äì —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

async def register_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["email"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def register_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = context.user_data["email"]
    password = update.message.text
    if len(password) < 6:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return PASSWORD
    context.user_data["password"] = password
    payload = {"email": email, "password": password, "platform": "tg-bot"}

    try:
        response = requests.post(SIGNUP_URL, json=payload)
        response.raise_for_status()
        try:
            data = response.json()
        except ValueError:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç–∞: {response.text}")
            raise ValueError("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
        access_token = data.get("access_token")
        refresh_token = data.get("refresh_token")
        if not access_token or not refresh_token:
            raise ValueError("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª access_token –∏–ª–∏ refresh_token")
        context.user_data["access_token"] = access_token
        context.user_data["refresh_token"] = refresh_token

        # –í—ã–ø–æ–ª–Ω—è–µ–º handshake –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è client_id, k_enc –∏ k_mac
        handshake_data = perform_handshake(HANDSHAKE_INIT_URL, access_token)
        ks = perform_finalize(HANDSHAKE_FINALIZE_URL, handshake_data, access_token)
        client_id = handshake_data["client_id"]

        # –î–µ—Ä–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á–∏ k_enc –∏ k_mac
        k_enc, k_mac = derive_keys(ks)
        k_enc_b64 = base64.b64encode(k_enc).decode('utf-8')
        k_mac_b64 = base64.b64encode(k_mac).decode('utf-8')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        save_session(update.effective_user.id, client_id, k_enc_b64, k_mac_b64)

        await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.", reply_markup=ReplyKeyboardMarkup(FILE_MENU_BUTTONS, resize_keyboard=True))
    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END

async def register_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –í—Ö–æ–¥ —á–µ—Ä–µ–∑ API
async def login_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

async def login_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["email"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD


async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = context.user_data["email"]
    password = update.message.text
    context.user_data["password"] = password
    payload = {"email": email, "password": password, "platform": "tg-bot"}

    try:
        response = requests.post(LOGIN_URL, json=payload)
        response.raise_for_status()
        try:
            data = response.json()
        except ValueError:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç–∞: {response.text}")
            raise ValueError("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")

        access_token = data.get("access_token")
        refresh_token = data.get("refresh_token")
        k_enc = data.get("k_enc")  # –ü–æ–ª—É—á–∞–µ–º k_enc –≤ Base64
        k_mac = data.get("k_mac")  # –ü–æ–ª—É—á–∞–µ–º k_mac –≤ Base64
        if not access_token or not refresh_token or not k_enc or not k_mac:
            raise ValueError("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª access_token, refresh_token, k_enc –∏–ª–∏ k_mac")
        context.user_data["access_token"] = access_token
        context.user_data["refresh_token"] = refresh_token

        # –ò–∑–≤–ª–µ–∫–∞–µ–º client_id –∏–∑ access_token
        try:
            decoded_token = jwt.decode(access_token, options={"verify_signature": False})
            client_id = decoded_token.get("client_id")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º client_id
            if not client_id:
                # –ï—Å–ª–∏ client_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
                client_id = decoded_token.get("sub") or decoded_token.get("user_id") or decoded_token.get("id")
                if not client_id:
                    raise ValueError("client_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ access_token –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏")
        except jwt.InvalidTokenError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è access_token: {e}")
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å access_token")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        save_session(update.effective_user.id, client_id, k_enc, k_mac)

        await update.message.reply_text("–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.",
                                        reply_markup=ReplyKeyboardMarkup(FILE_MENU_BUTTONS, resize_keyboard=True))
        return ConversationHandler.END

    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        if "incorrect password or email" in error_msg or "Invalid credentials" in error_msg or "User not found" in error_msg:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –≤–≤–æ–¥–∞ email.")
            return EMAIL
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –≤–≤–æ–¥–∞ email.")
        return EMAIL

async def login_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if not session:
        await update.message.reply_text("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
        return
    refresh_token = context.user_data.get("refresh_token")
    if not refresh_token:
        await update.message.reply_text("–û—à–∏–±–∫–∞: refresh_token –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        payload = {"platform": "tg-bot", "refresh_token": refresh_token}
        response = requests.post(LOGOUT_URL, json=payload)
        response.raise_for_status()
        context.user_data.clear()
        try:
            conn = sqlite3.connect("sessions.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM sessions WHERE telegram_id = ?", (update.effective_user.id,))
            conn.commit()
            logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id {update.effective_user.id} —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ª–æ–≥–∞—É—Ç–∞.")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞! –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã.")
        await start(update, context)
    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
async def upload_file_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if not session or not context.user_data.get("access_token"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.")
        return
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–æ 50 –ú–ë).")
    return ConversationHandler.END

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if not session or not context.user_data.get("access_token"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message.document and not update.message.photo and not update.message.video:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∏–¥–µ–æ.")
            logger.error("No document or photo received in message")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–æ—Ç–æ
        if update.message.document:
            document = update.message.document
            file_name = document.file_name or f"file_{update.message.message_id}.bin"
            file_size = document.file_size
        elif update.message.photo:
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            file_name = f"photo_{update.message.message_id}.jpg"
            file_size = photo.file_size
        elif update.message.video:
            video = update.message.video
            file_name = video.file_name or f"video_{update.message.message_id}.mp4"
            file_size = video.file_size

        max_file_size = 50 * 1024 * 1024  # 50 –ú–ë –≤ –±–∞–π—Ç–∞—Ö

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > max_file_size:
            url = "https://example.com/upload"
            text = f"–§–∞–π–ª {file_name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë ({file_size / (1024 * 1024):.2f} –ú–ë). " \
                   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç:"
            keyboard = [[InlineKeyboardButton('üîó –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url=url)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            logger.info(f"File {file_name} too large: {file_size} bytes")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
        file = await (document.get_file() if update.message.document else
                      photo.get_file() if update.message.photo else
                      video.get_file())
        os.makedirs("uploads", exist_ok=True)
        file_path = os.path.join("uploads", file_name)

        for attempt in range(3):
            try:
                await asyncio.wait_for(file.download_to_drive(file_path), timeout=30)
                logger.info(f"File {file_name} successfully downloaded to {file_path}")
                break
            except asyncio.TimeoutError:
                logger.warning(f"Download attempt {attempt + 1} failed for {file_name}: Timeout")
                if attempt == 2:
                    await update.message.reply_text(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª {file_name} –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    logger.error(f"Failed to download {file_name} after 3 attempts")
                    return
                continue

        # –®–∏—Ñ—Ä—É–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        encrypted_data = encrypt_file(file_path, session["k_enc"], session["k_mac"])
        if not encrypted_data:
            raise Exception("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        access_token = context.user_data["access_token"]
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/octet-stream",
            "X-Orig-Filename": file_name,
            "X-Orig-Mime": (document.mime_type if update.message.document else
                            "image/jpeg" if update.message.photo else
                            "video/mp4" if update.message.video else
                            "application/octet-stream"),
            "X-File-Category": "unknown"
        }
        response = requests.post(UPLOAD_FILES_URL, headers=headers, data=encrypted_data)

        response.raise_for_status()
        response_data = response.json()
        logger.info(f"File {file_name} uploaded to MinIO: {response_data}")

        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)

        await update.message.reply_text(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data}")

    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_name if 'file_name' in locals() else 'unknown'}: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async def get_file_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if not session or not context.user_data.get("access_token"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∞–π–ª–∞:")
    return FILE_ID

async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["file_id"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞ (photo, unknown, video, text):")
    return FILE_TYPE

async def get_file_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_id = context.user_data["file_id"]
    file_type = update.message.text.lower()
    if file_type not in ["photo", "unknown", "video", "text"]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: photo, unknown, video, text. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return FILE_TYPE

    try:
        access_token = context.user_data["access_token"]
        headers = {"Authorization": f"Bearer {access_token}"}
        params = {"id": file_id, "type": file_type}
        response = requests.get(GET_FILE_URL, headers=headers, params=params)
        response.raise_for_status()
        response_data = response.json()
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {response_data}")
    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END

async def get_file_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
async def delete_file_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if not session or not context.user_data.get("access_token"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return FILE_ID

async def delete_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["file_id"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞ (photo, unknown, video, text):")
    return FILE_TYPE

async def delete_file_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_id = context.user_data["file_id"]
    file_type = update.message.text.lower()
    if file_type not in ["photo", "unknown", "video", "text"]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: photo, unknown, video, text. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return FILE_TYPE

    try:
        access_token = context.user_data["access_token"]
        headers = {"Authorization": f"Bearer {access_token}"}
        params = {"id": file_id, "type": file_type}
        response = requests.delete(DELETE_FILE_URL, headers=headers, params=params)
        response.raise_for_status()
        response_data = response.json()
        await update.message.reply_text(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data}")
    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END

async def delete_file_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def get_all_files_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_session(update.effective_user.id)
    if not session or not context.user_data.get("access_token"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–æ–≤ (photo, unknown, video, text):")
    return FILE_CATEGORY

async def get_all_files_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_category = update.message.text.lower()
    if file_category not in ["photo", "unknown", "video", "text"]:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: photo, unknown, video, text. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return FILE_CATEGORY

    try:
        access_token = context.user_data["access_token"]
        headers = {"Authorization": f"Bearer {access_token}"}
        params = {"type": file_category}
        response = requests.get(GET_ALL_FILES_URL, headers=headers, params=params)
        response.raise_for_status()
        response_data = response.json()
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {file_category}: {response_data}")
    except requests.exceptions.HTTPError as e:
        error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        try:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        except ValueError:
            error_msg = f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response.text}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {error_msg}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return ConversationHandler.END

async def get_all_files_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()
    if "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" in txt or "üìù" in txt:
        await register_start(update, context)
    elif "–≤—Ö–æ–¥" in txt or "–≤–æ–π—Ç–∏" in txt or "üîë" in txt:
        await login_start(update, context)
    elif "–ø–æ–º–æ—â—å" in txt or "‚ÑπÔ∏è" in txt:
        await help_command(update, context)
    elif "–≤—ã–π—Ç–∏" in txt or "üö™" in txt:
        await logout(update, context)
    elif "–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª" in txt or "üì§" in txt:
        await upload_file_start(update, context)
    elif "–ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª" in txt or "üì•" in txt:
        await get_file_start(update, context)
    elif "—É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª" in txt or "üóëÔ∏è" in txt:
        await delete_file_start(update, context)
    elif "–ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã" in txt or "üìÇ" in txt:
        await get_all_files_start(update, context)
    else:
        await update.message.reply_text("–Ø –≤–∞—Å –ø–æ–Ω—è–ª! –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    register_handler = ConversationHandler(
        entry_points=[CommandHandler("register", register_start),
                      MessageHandler(filters.Regex('^(üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)$'), register_start)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_password)],
        },
        fallbacks=[CommandHandler("cancel", register_cancel)]
    )

    # ConversationHandler –¥–ª—è –≤—Ö–æ–¥–∞
    login_handler = ConversationHandler(
        entry_points=[CommandHandler("login", login_start), MessageHandler(filters.Regex('^(üîë –í–æ–π—Ç–∏)$'), login_start)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
        },
        fallbacks=[CommandHandler("cancel", login_cancel)]
    )

    # ConversationHandler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    get_file_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(üì• –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª)$'), get_file_start)],
        states={
            FILE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_file_id)],
            FILE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_file_type)],
        },
        fallbacks=[CommandHandler("cancel", get_file_cancel)]
    )

    # ConversationHandler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    delete_file_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª)$'), delete_file_start)],
        states={
            FILE_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_file_id)],
            FILE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_file_type)],
        },
        fallbacks=[CommandHandler("cancel", delete_file_cancel)]
    )

    # ConversationHandler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    get_all_files_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(üìÇ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã)$'), get_all_files_start)],
        states={
            FILE_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_all_files_category)],
        },
        fallbacks=[CommandHandler("cancel", get_all_files_cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("logout", logout))
    app.add_handler(register_handler)
    app.add_handler(login_handler)
    app.add_handler(get_file_handler)
    app.add_handler(delete_file_handler)
    app.add_handler(get_all_files_handler)
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()