'use client';
import React, {useEffect, useState} from 'react';
import {FileData} from '@/app/api/models/FileData';
import CloudService from '../api/services/CloudServices';
import dynamic from 'next/dynamic';
import TypeFileIcon from '../ui/TypeFileIcon';
import FileCard from '../ui/FileCard';
import {Loader2} from 'lucide-react';


export default function TypeGetAll() {
    const [filesByType, setFilesByType] = useState<Record<string, FileData[]>>({});
    const [isLoading, setIsLoading] = useState(true);
    const [isError, setIsError] = useState(false);
    const types = ['text', 'photo', 'video', 'unknown'];

    const DiskUsageChart = dynamic(() => import('../ui/DiskUsageChart'), {
        ssr: false,
        loading: () => (
            <div className="flex justify-center items-center h-20">
                <div className="w-6 h-6 border-4 border-blue-500 border-t-transparent rounded-full animate-spin" />
            </div>
        ),
    });

    useEffect(() => {
        const fetchAllTypes = async () => {
            try {
                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
                const responses = await Promise.all(
                    types.map((type) => CloudService.getAllCloud(type))
                );

                const result: Record<string, FileData[]> = {};
                responses.forEach((response, index) => {
                    const type = types[index];
                    const fileData = response.data.file_data;

                    if (Array.isArray(fileData)) {
                        result[type] = fileData.map((file) => ({
                            obj_id: String(file.obj_id),
                            name: String(file.name),
                            url: String(file.url),
                            created_at: String(file.created_at),
                            mime_type: String(file.mime_type),
                        }));
                    } else {
                        result[type] = [];
                    }
                });

                setFilesByType(result);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
                setIsError(true);
            } finally {
                setIsLoading(false);
            }
        };

        fetchAllTypes();
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const handleDelete = (obj_id: string) => {
        setFilesByType((prev) => {
            const updated = { ...prev };
            Object.keys(updated).forEach((type) => {
                updated[type] = updated[type].filter((file) => file.obj_id !== obj_id);
            });
            return updated;
        });
    };

    if (isLoading) {
        return (
            <div className="inset-0 bg-white/70 backdrop-blur-sm z-10 flex items-center justify-center">
                <div className="flex flex-col items-center">
                    <Loader2 className="w-10 h-10 text-blue-500 animate-spin mb-2" />
                    <span className="text-gray-700 text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...</span>
                </div>
            </div>
        );
    }

    if (isError) {
        return <p className="text-red-500">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.</p>;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
    const fileCounts = types.reduce((acc, type) => {
        acc[type] = filesByType[type]?.length || 0;
        return acc;
    }, {} as Record<string, number>);


    return (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2 gap-6 p-4">
            {types.map((type) => (
                <div
                    key={type}
                    className="bg-white border rounded-xl shadow-md p-4 flex flex-col justify-between w-full h-64"
                >
                    <div className="flex items-center gap-2 mb-3">
                        <TypeFileIcon type={type} />
                        <h2 className="text-lg font-jetbrains text-blue-600 capitalize">{type}</h2>
                    </div>

                    {filesByType[type]?.length === 0 ? (
                        <div className="text-gray-500 text-center flex-1 flex flex-col items-center justify-center">
                            <p className="text-xl">üìÇ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤</p>
                        </div>
                    ) : (
                        <div className="space-y-2 overflow-auto flex-1">
                            {filesByType[type].map((item) => (
                                <FileCard
                                    key={item.obj_id}
                                    obj_id={item.obj_id}
                                    name={item.name}
                                    url={item.url}
                                    created_at={item.created_at}
                                    type={type}
                                    mime_type={item.mime_type}
                                    onDelete={handleDelete}
                                />
                            ))}
                        </div>
                    )}
                </div>
            ))}

            <div className="mt-10 p-4">
                <h2 className="text-xl font-semibold mb-3">üìÅ –í—Å–µ —Ñ–∞–π–ª—ã</h2>
                <div className="flex flex-wrap gap-3 overflow-x-auto">
                    {Object.values(filesByType).flat().map((file) => (
                        <button
                            key={file.obj_id}
                            onClick={() => {
                                // –í—ã–∑—ã–≤–∞–µ–º handleView –∏–∑ FileCard (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ FileCard)
                                // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É –±–µ–∑ href
                            }}
                            className="px-3 py-2 bg-gray-100 rounded-lg border shadow text-sm hover:bg-blue-50 transition whitespace-nowrap"
                        >
                            {file.name}
                        </button>
                    ))}
                </div>
            </div>

            <DiskUsageChart fileCounts={fileCounts} />
        </div>
    );
}